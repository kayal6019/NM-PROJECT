# -*- coding: utf-8 -*-
"""NM PROJECT

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xnNML-pLk4M-TcfEoTOplTgB4AvgwKCL
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import PassiveAggressiveClassifier
from sklearn.metrics import accuracy_score, confusion_matrix

# Load dataset (assumes 'label' and 'text' columns)
df = pd.read_csv("news.csv")  # Replace with your dataset path
df = df[['text', 'label']]  # Ensure only required columns

# Split data
X_train, X_test, y_train, y_test = train_test_split(df['text'], df['label'], test_size=0.2, random_state=42)

# Vectorization with TF-IDF
tfidf = TfidfVectorizer(stop_words='english', max_df=0.7)
X_train_tfidf = tfidf.fit_transform(X_train)
X_test_tfidf = tfidf.transform(X_test)

# Train model
model = PassiveAggressiveClassifier(max_iter=50)
model.fit(X_train_tfidf, y_train)

# Evaluate
y_pred = model.predict(X_test_tfidf)
acc = accuracy_score(y_test, y_pred)
conf_mat = confusion_matrix(y_test, y_pred)

print(f"Accuracy: {acc*100:.2f}%")
print("Confusion Matrix:")
print(conf_mat)

# Optional: Test on your own news text
def detect_fake_news(text):
    vec = tfidf.transform([text])
    return model.predict(vec)[0]

# Example usage
news = "The government has announced a new policy for economic growth."
print("Prediction:", detect_fake_news(news))